[
    {
        "type": "message",
        "text": "“Tools for Thought as Cultural Practices, not Computational Objects” by <@U0275EZH3UN>\n\nHonestly a really important reframing of the bias to computation we attach to the phrase “Tool for Thought”!\n\n<https:\/\/m.youtube.com\/watch?v=t6uhvFGPUE0|https:\/\/m.youtube.com\/watch?v=t6uhvFGPUE0>",
        "files": [
            {
                "id": "F03EB3GSZLY",
                "created": 1651332175,
                "timestamp": 1651332175,
                "name": "Image from iOS.jpg",
                "title": "Image from iOS",
                "mimetype": "image\/jpeg",
                "filetype": "jpg",
                "pretty_type": "JPEG",
                "user": "U0378MDUG1Y",
                "editable": false,
                "size": 30306,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "subtype": "slack_image",
                "url_private": "https:\/\/files.slack.com\/files-pri\/T5TCAFTA9-F03EB3GSZLY\/image_from_ios.jpg?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "url_private_download": "https:\/\/files.slack.com\/files-pri\/T5TCAFTA9-F03EB3GSZLY\/download\/image_from_ios.jpg?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "media_display_type": "unknown",
                "thumb_64": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F03EB3GSZLY-0a7181c47e\/image_from_ios_64.jpg?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_80": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F03EB3GSZLY-0a7181c47e\/image_from_ios_80.jpg?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_360": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F03EB3GSZLY-0a7181c47e\/image_from_ios_360.jpg?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_360_w": 360,
                "thumb_360_h": 192,
                "thumb_480": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F03EB3GSZLY-0a7181c47e\/image_from_ios_480.jpg?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_480_w": 480,
                "thumb_480_h": 256,
                "thumb_160": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F03EB3GSZLY-0a7181c47e\/image_from_ios_160.jpg?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_720": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F03EB3GSZLY-0a7181c47e\/image_from_ios_720.jpg?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_720_w": 720,
                "thumb_720_h": 385,
                "thumb_800": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F03EB3GSZLY-0a7181c47e\/image_from_ios_800.jpg?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_800_w": 800,
                "thumb_800_h": 427,
                "thumb_960": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F03EB3GSZLY-0a7181c47e\/image_from_ios_960.jpg?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_960_w": 960,
                "thumb_960_h": 513,
                "thumb_1024": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F03EB3GSZLY-0a7181c47e\/image_from_ios_1024.jpg?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 547,
                "original_w": 1125,
                "original_h": 601,
                "thumb_tiny": "AwAZADB+nwRSWoZ41Y5PJFWfstv\/AM8U\/KotM\/481+pq2e1AEH2WD\/nin5UC1g\/54p+VSnGOTjNAxjhs4oAj+y2\/\/PFPyqvfRpBbFo1C4I4HSrw71U1P\/jzP1FABpn\/Hmv1NWzVPTf8AjzH1NW6AEPTBoGOcd6WigBRVTU\/+PM\/UVaqpqX\/HofqKAP\/Z",
                "permalink": "https:\/\/futureofcoding.slack.com\/files\/U0378MDUG1Y\/F03EB3GSZLY\/image_from_ios.jpg",
                "permalink_public": "https:\/\/slack-files.com\/T5TCAFTA9-F03EB3GSZLY-78eb63aad1",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "user": "U0378MDUG1Y",
        "display_as_bot": false,
        "ts": "1651332273.935819",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gvo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“Tools for Thought as Cultural Practices, not Computational Objects” by "
                            },
                            {
                                "type": "user",
                                "user_id": "U0275EZH3UN"
                            },
                            {
                                "type": "text",
                                "text": "\n\nHonestly a really important reframing of the bias to computation we attach to the phrase “Tool for Thought”!\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/m.youtube.com\/watch?v=t6uhvFGPUE0",
                                "text": "https:\/\/m.youtube.com\/watch?v=t6uhvFGPUE0"
                            }
                        ]
                    }
                ]
            }
        ],
        "edited": {
            "user": "U0378MDUG1Y",
            "ts": "1651346102.000000"
        },
        "client_msg_id": "2CE45E61-9989-42F1-8ADF-23F855758809",
        "attachments": [
            {
                "from_url": "https:\/\/m.youtube.com\/watch?v=t6uhvFGPUE0",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/t6uhvFGPUE0\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/t6uhvFGPUE0?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/m.youtube.com\/watch?v=t6uhvFGPUE0",
                "fallback": "YouTube Video: Tools for Thought Rocks: April 2022 - Maggie Appleton, Hunter Clarke",
                "title": "Tools for Thought Rocks: April 2022 - Maggie Appleton, Hunter Clarke",
                "title_link": "https:\/\/m.youtube.com\/watch?v=t6uhvFGPUE0",
                "author_name": "Tools for Thought Rocks!",
                "author_link": "https:\/\/www.youtube.com\/c\/ToolsforThoughtRocks",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "reactions": [
            {
                "name": "sparkles",
                "users": [
                    "U02U66FT3PG",
                    "U014WA16VNJ",
                    "UJBAJNFLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "606EF042-50F0-4079-9EE9-34211F69AEF6",
        "type": "message",
        "text": "I am building something that is comparable I think. The visual editor component that I use in the visual webassembly compiler which I am building is generic. I use it myself for other implementations as well. But it is still in an experimental stage unfortunately. React-flow is much more mature I think and has a broader focus. At least thats my impression",
        "user": "U0123H7JRDM",
        "ts": "1651332734.986979",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfb283c8a09c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/fb283c8a09c5c8909b00498ba9634a70.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SLbi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am building something that is comparable I think. The visual editor component that I use in the visual webassembly compiler which I am building is generic. I use it myself for other implementations as well. But it is still in an experimental stage unfortunately. React-flow is much more mature I think and has a broader focus. At least thats my impression"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651299802.016629",
        "parent_user_id": "U02E4DAQGSZ"
    },
    {
        "client_msg_id": "8726377e-1653-47a0-be2f-87512636eb7e",
        "type": "message",
        "text": "I just got around to watching <https:\/\/www.youtube.com\/watch?v=euRZDSOWdE0>, and I'm particularly interested in your ability to record runtime inputs once and reuse them while iteratively modifying the program. How hard does it seem to extend this capability for the sorts of interesting programs you mentioned, Discord bots, 2D games and so on?",
        "user": "UCUSW7WVD",
        "ts": "1651366681.596099",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=euRZDSOWdE0",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/euRZDSOWdE0\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/euRZDSOWdE0?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=euRZDSOWdE0",
                "fallback": "YouTube Video: \"Real python, made of blocks\" - Katie Bell (PyConline AU 2021)",
                "title": "\"Real python, made of blocks\" - Katie Bell (PyConline AU 2021)",
                "title_link": "https:\/\/www.youtube.com\/watch?v=euRZDSOWdE0",
                "author_name": "PyCon AU",
                "author_link": "https:\/\/www.youtube.com\/c\/PyConAU",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VpuG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just got around to watching "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=euRZDSOWdE0"
                            },
                            {
                                "type": "text",
                                "text": ", and I'm particularly interested in your ability to record runtime inputs once and reuse them while iteratively modifying the program. How hard does it seem to extend this capability for the sorts of interesting programs you mentioned, Discord bots, 2D games and so on?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1650580496.430299",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "33c36825-367b-485f-8f41-db7076c9bddc",
        "type": "message",
        "text": "Currently it’s just capturing stdin only and re-running the entire app, but I have plans for more. In order to be able to replay a program deterministically you need to be able to capture all possible inputs. This includes little background things like random number generator seeds, the current time whenever it is read, etc. Currently it doesn’t do a good job of replaying if you use a random number or try to measure how long it takes for a user to provide input.\n\nFor a Discord bot you need to capture request-response pairs (or a recording of whatever is streaming over a websocket) so it’s as easy as storing them and replaying them. If you decide to change the code to make a new request in a different order or with different parameters then well... it can’t replay that safely so it’d have to prompt the user to do another manual run. For a network heavy app like that most of the running time is waiting for the network so replays would be pretty fast.\n\nFor a 2D game… that’s a lot harder to deterministically reproduce, especially at speed. You’d need to replay each mouse\/keyboard event at the appropriate times in the main event loop, and you’d need to replay all the event\/render loops with the same timestamp they originally occurred at - so if you take a 5min long capture of gameplay then well… replaying that could be pretty slow, even if you cut out all the sleeps, max out your CPU and skip the actual rendering. That is unless you can find a way to make it faster by snapshotting state and skipping steps.\n\nInspiration for this (and considering that it might even be possible to deterministically record and replay programs) came from the RR project: <https:\/\/rr-project.org\/>. They work at a very different level of abstraction though.",
        "user": "U01NWARGPNC",
        "ts": "1651368877.839349",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "beaca7f5eafb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-15\/1767152625025_beaca7f5eafb1b6233d0_72.png",
            "first_name": "Katie",
            "real_name": "Katie Bell",
            "display_name": "Katie Bell",
            "team": "T5TCAFTA9",
            "name": "katie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/AXQj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Currently it’s just capturing stdin only and re-running the entire app, but I have plans for more. In order to be able to replay a program deterministically you need to be able to capture all possible inputs. This includes little background things like random number generator seeds, the current time whenever it is read, etc. Currently it doesn’t do a good job of replaying if you use a random number or try to measure how long it takes for a user to provide input.\n\nFor a Discord bot you need to capture request-response pairs (or a recording of whatever is streaming over a websocket) so it’s as easy as storing them and replaying them. If you decide to change the code to make a new request in a different order or with different parameters then well... it can’t replay that safely so it’d have to prompt the user to do another manual run. For a network heavy app like that most of the running time is waiting for the network so replays would be pretty fast.\n\nFor a 2D game… that’s a lot harder to deterministically reproduce, especially at speed. You’d need to replay each mouse\/keyboard event at the appropriate times in the main event loop, and you’d need to replay all the event\/render loops with the same timestamp they originally occurred at - so if you take a 5min long capture of gameplay then well… replaying that could be pretty slow, even if you cut out all the sleeps, max out your CPU and skip the actual rendering. That is unless you can find a way to make it faster by snapshotting state and skipping steps.\n\nInspiration for this (and considering that it might even be possible to deterministically record and replay programs) came from the RR project: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/rr-project.org\/"
                            },
                            {
                                "type": "text",
                                "text": ". They work at a very different level of abstraction though."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1650580496.430299",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "fbe0eee4-69b2-43c6-a93f-4f167afebf44",
        "type": "message",
        "text": "Yeah. I've been interested in this aspect for a long time. See this 2-minute video from last year, for example: <https:\/\/archive.org\/details\/akkartik-mu-2021-05-31|https:\/\/archive.org\/details\/akkartik-mu-2021-05-31>",
        "user": "UCUSW7WVD",
        "ts": "1651369819.231029",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1651370958.000000"
        },
        "attachments": [
            {
                "from_url": "https:\/\/archive.org\/details\/akkartik-mu-2021-05-31",
                "thumb_url": "https:\/\/archive.org\/download\/akkartik-mu-2021-05-31\/akkartik-mu-2021-05-31.thumbs\/akkartik-mu-2021-05-31_000057.jpg",
                "thumb_width": 720,
                "thumb_height": 406,
                "service_icon": "https:\/\/archive.org\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/archive.org\/details\/akkartik-mu-2021-05-31",
                "fallback": "Internet Archive: 2021-05-31: Referential transparency in the Mu computer : Kartik Agaram : Free Download, Borrow, and Streaming : Internet Archive",
                "text": "The Mu computer is built from scratch without dependencies. Every part of the stack tracks its dependencies. There are no side-effects, only effects. As a...",
                "title": "2021-05-31: Referential transparency in the Mu computer : Kartik Agaram : Free Download, Borrow, and Streaming : Internet Archive",
                "title_link": "https:\/\/archive.org\/details\/akkartik-mu-2021-05-31",
                "service_name": "Internet Archive"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l+rzT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah. I've been interested in this aspect for a long time. See this 2-minute video from last year, for example: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/archive.org\/details\/akkartik-mu-2021-05-31",
                                "text": "https:\/\/archive.org\/details\/akkartik-mu-2021-05-31"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1650580496.430299",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "023c052d-8d5a-4dce-8823-d688473592b8",
        "type": "message",
        "text": "I made a thing that captures Python execution then let's you replay it <https:\/\/github.com\/chrisknott\/algojammer|https:\/\/github.com\/chrisknott\/algojammer>\n\nIt saves a full dump of memory state every 200k interpreter steps, and between this it reruns the program in its own stripped down interpreter which is day. I pulled out the functionality into a library but I sort of gave up on it a while ago <https:\/\/github.com\/ChrisKnott\/Execorder|https:\/\/github.com\/ChrisKnott\/Execorder>",
        "user": "UDQBTJ211",
        "ts": "1651387203.348589",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/0e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I made a thing that captures Python execution then let's you replay it "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/chrisknott\/algojammer",
                                "text": "https:\/\/github.com\/chrisknott\/algojammer"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt saves a full dump of memory state every 200k interpreter steps, and between this it reruns the program in its own stripped down interpreter which is day. I pulled out the functionality into a library but I sort of gave up on it a while ago "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/ChrisKnott\/Execorder",
                                "text": "https:\/\/github.com\/ChrisKnott\/Execorder"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1650580496.430299",
        "parent_user_id": "UCUSW7WVD"
    }
]