[
    {
        "client_msg_id": "84fc8da7-d5bc-439d-a497-d9920307e04a",
        "type": "message",
        "text": "<@UCGAK10LS> hi! I'm sorry but I lost the thread of the argument a little... :slightly_smiling_face:\n\nYou started asking about distributed GC, but then you write:\n&gt; Tenstorrent's chips have no shared memory, no caches, and no threads. Instead they have a grid of compute units, each with a dedicated SRAM (not a cache) and capable of doing parallel matrix\/tensor operations.\nIf you don't have shared memory, you don't need and can't actually have a distributed GC. You're left with \"Erlang-style\" per-thread (or per-core) separate GCs and memory copying between threads.\n\nThen what's the problem? :slightly_smiling_face:",
        "user": "U027P92A0N5",
        "ts": "1625727819.193300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "U027P92A0N5",
            "ts": "1625728023.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c+Ncv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " hi! I'm sorry but I lost the thread of the argument a little... "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nYou started asking about distributed GC, but then you write:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tenstorrent's chips have no shared memory, no caches, and no threads. Instead they have a grid of compute units, each with a dedicated SRAM (not a cache) and capable of doing parallel matrix\/tensor operations."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIf you don't have shared memory, you don't need and can't actually have a distributed GC. You're left with \"Erlang-style\" per-thread (or per-core) separate GCs and memory copying between threads.\n\nThen what's the problem? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624437161.147900",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "1dbe3a72-4243-4aba-9431-89b8366d67cb",
        "type": "message",
        "text": "&gt; ...in Hest...\nNot quite :)\n&gt; The list seems already quite complete\nMatter of perspective, I suppose. If you took a look at all the function names in your typical structures \/ collections library — say, the Ruby standard library, or much of Clojure.core, or Boost, or what have you — you'd find plenty more verbs than what I've listed. Magnitudes more, even. And even if many of these verbs are just different words for the same concept (select \/ filter \/ pluck \/ so on), having a little flexibility in tone or interpretation is valuable when ideating. So for that reason, I'm curious to see if anyone's made an effort to collect a body of these sorts of terms.",
        "user": "UC2A2ARPT",
        "ts": "1625727999.193600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GhdE",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "...in Hest..."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not quite :)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The list seems already quite complete"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Matter of perspective, I suppose. If you took a look at all the function names in your typical structures \/ collections library — say, the Ruby standard library, or much of Clojure.core, or Boost, or what have you — you'd find plenty more verbs than what I've listed. Magnitudes more, even. And even if many of these verbs are just different words for the same concept (select \/ filter \/ pluck \/ so on), having a little flexibility in tone or interpretation is valuable when ideating. So for that reason, I'm curious to see if anyone's made an effort to collect a body of these sorts of terms."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "7731ff39-21c8-4591-9daf-6898f986dccc",
        "type": "message",
        "text": "The concepts of \"memory safety\" and \"garbage\" are mostly independent of a system's memory model. Computer A can depend upon data located in the memory of computer B, and if so, computer B must not de-allocate that memory (else the system will not function correctly). Alternately, computer B may have a memory allocation that no computer will ever use again, in which case the memory should be de-allocated (else the system will consume unnecessary resources).",
        "user": "UCGAK10LS",
        "ts": "1625733652.193900",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "770c193fd379",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-17\/1092364753072_770c193fd379ebbced3f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zwh4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The concepts of \"memory safety\" and \"garbage\" are mostly independent of a system's memory model. Computer A can depend upon data located in the memory of computer B, and if so, computer B must not de-allocate that memory (else the system will not function correctly). Alternately, computer B may have a memory allocation that no computer will ever use again, in which case the memory should be de-allocated (else the system will consume unnecessary resources)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624437161.147900",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "e0fb6989-0bc0-4329-89f5-bd2c409d5253",
        "type": "message",
        "text": "I'm pretty sure \"memory safety\" and \"garbage\" are completely dependent on (at least) _language_ memory model. Without Remote Direct Memory Access \"Computer A\" _can not_ physically depend on memory of \"Computer B\". Or you have very abstract notion of \"dependence\". :slightly_smiling_face:\n\nAnyway, I vaguely remember hearing about the same problem of \"distributed garbage collection\" in a context of distributed file systems and operating systems. The solution AFAIR was to move objects to the node with the largest number of references to the object. First, it should improve performance, but in the end the object will end up on the node that holds the last reference to it, so the node will delete it when it no longer needed. I don't have references to relevant research but maybe it will give you some food for thought anyway?",
        "user": "U027P92A0N5",
        "ts": "1625737221.194100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZPXT1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm pretty sure \"memory safety\" and \"garbage\" are completely dependent on (at least) "
                            },
                            {
                                "type": "text",
                                "text": "language",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " memory model. Without Remote Direct Memory Access \"Computer A\" "
                            },
                            {
                                "type": "text",
                                "text": "can not",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " physically depend on memory of \"Computer B\". Or you have very abstract notion of \"dependence\". "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAnyway, I vaguely remember hearing about the same problem of \"distributed garbage collection\" in a context of distributed file systems and operating systems. The solution AFAIR was to move objects to the node with the largest number of references to the object. First, it should improve performance, but in the end the object will end up on the node that holds the last reference to it, so the node will delete it when it no longer needed. I don't have references to relevant research but maybe it will give you some food for thought anyway?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624437161.147900",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "29DDAD86-96DA-44BE-B087-64E36043746C",
        "type": "message",
        "text": "If computer A sends a query message to computer B, and computer B sends a reply message whose contents are dependent on B’s memory, then computer A depends on computer B’s memory.",
        "user": "UCGAK10LS",
        "ts": "1625737680.199100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "770c193fd379",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-17\/1092364753072_770c193fd379ebbced3f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E3sn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If computer A sends a query message to computer B, and computer B sends a reply message whose contents are dependent on B’s memory, then computer A depends on computer B’s memory."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624437161.147900",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "11340934-A090-48E1-AF4A-87896319838F",
        "type": "message",
        "text": "If B responds with an error message then you do not have a memory safe system. If B holds data that nobody will ever query (e.g. because nobody knows the UUID or URL) then you have garbage.",
        "user": "UCGAK10LS",
        "ts": "1625737778.201400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "770c193fd379",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-17\/1092364753072_770c193fd379ebbced3f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "swGKA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If B responds with an error message then you do not have a memory safe system. If B holds data that nobody will ever query (e.g. because nobody knows the UUID or URL) then you have garbage."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624437161.147900",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "f26eb931-bdbb-4aeb-988e-ecbaa92048e0",
        "type": "message",
        "text": "When you say \"memory\" I think about RAM and that \"memory pressure\" can be alleviated by dumping rarely requested data to files as many memory caching systems do. If you include file storage into \"memory\" then yeah, but storage is pretty huge and pretty cheap nowadays, we can store almost everything almost forever... :slightly_smiling_face:",
        "user": "U027P92A0N5",
        "ts": "1625738442.201600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=ISK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When you say \"memory\" I think about RAM and that \"memory pressure\" can be alleviated by dumping rarely requested data to files as many memory caching systems do. If you include file storage into \"memory\" then yeah, but storage is pretty huge and pretty cheap nowadays, we can store almost everything almost forever... "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624437161.147900",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "48E612BF-4391-45D8-BFF0-AB258B717DFC",
        "type": "message",
        "text": "Maybe pick a respected functional library like lodash?",
        "user": "USH01JEDQ",
        "ts": "1625753584.202300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0c975eeefb0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0c975eeefb0d9484d0ccce64bbd16e85.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0012-72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6MDz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe pick a respected functional library like lodash?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "254dc499-bc27-4900-9cb5-e5a3f005b4d4",
        "type": "message",
        "text": "The R Studio Cheat Sheets are amazing (<https:\/\/www.rstudio.com\/resources\/cheatsheets\/>) and well worth printing out",
        "user": "UMVFWPZ36",
        "ts": "1625785160.202500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x93yj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The R Studio Cheat Sheets are amazing ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.rstudio.com\/resources\/cheatsheets\/"
                            },
                            {
                                "type": "text",
                                "text": ") and well worth printing out"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "c5c2c97a-3b60-4014-9923-b7da1bb042ed",
        "type": "message",
        "text": "The dplyr one in particular would be relevant",
        "user": "UMVFWPZ36",
        "ts": "1625785237.202800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FrMd1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The dplyr one in particular would be relevant"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    }
]