[
    {
        "client_msg_id": "56816085-36a8-4a9f-b50c-3abaef02ad0c",
        "type": "message",
        "text": "I often recommend Chapter 6 of The Practice of Programming (<http:\/\/index-of.co.uk\/Etc\/The.Practice.of.Programming.-.B.W..Kernighan..pdf|pdf here>) for hard won wisdom on testing.",
        "user": "U013ZLJARC7",
        "ts": "1606899275.182900",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf4ae9e5b293",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f4ae9e5b29386489b18b3bc6b1f41a22.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sufo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I often recommend Chapter 6 of The Practice of Programming ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/index-of.co.uk\/Etc\/The.Practice.of.Programming.-.B.W..Kernighan..pdf",
                                "text": "pdf here"
                            },
                            {
                                "type": "text",
                                "text": ") for hard won wisdom on testing."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606863972.181800",
        "parent_user_id": "UL5AX4G2H",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "<@U013ZLJARC7> That link was useful and timeless enough that I made some notes for myself. Thank you!",
        "files": [
            {
                "id": "F01G6JSK6SY",
                "created": 1606932581,
                "timestamp": 1606932581,
                "name": "notes_on_testing_from_practice_of_programming.txt",
                "title": "notes_on_testing_from_practice_of_programming.txt",
                "mimetype": "text\/plain",
                "filetype": "text",
                "pretty_type": "Plain Text",
                "user": "UCUSW7WVD",
                "editable": true,
                "size": 1747,
                "mode": "snippet",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https:\/\/files.slack.com\/files-pri\/T5TCAFTA9-F01G6JSK6SY\/notes_on_testing_from_practice_of_programming.txt?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "url_private_download": "https:\/\/files.slack.com\/files-pri\/T5TCAFTA9-F01G6JSK6SY\/download\/notes_on_testing_from_practice_of_programming.txt?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "permalink": "https:\/\/futureofcoding.slack.com\/files\/UCUSW7WVD\/F01G6JSK6SY\/notes_on_testing_from_practice_of_programming.txt",
                "permalink_public": "https:\/\/slack-files.com\/T5TCAFTA9-F01G6JSK6SY-a067f309c4",
                "edit_link": "https:\/\/futureofcoding.slack.com\/files\/UCUSW7WVD\/F01G6JSK6SY\/notes_on_testing_from_practice_of_programming.txt\/edit",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "ts": "1606932585.183500",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wKu=W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " That link was useful and timeless enough that I made some notes for myself. Thank you!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606863972.181800",
        "parent_user_id": "UL5AX4G2H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U013ZLJARC7",
                    "UFPPABQ7P"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "f1a5e457-a258-4519-83b1-50eb2d4c8407",
        "type": "message",
        "text": "Here are some opinions I wrote down yesterday, which happen to be disjoint:\n* Tests aren't always useful. There are legitimate reasons to avoid automated tests in some situations.\n* Testing first is a great way to get into the habit of writing tests. But the key is the tests, not when you write them.\n* In each test, take care to separate the thing being tested from setup and checks (I hadn't heard of AAA; thank you)\n* On conventional stacks, try to write code in a way that minimizes the need for testing I\/O (my Mu is designed to eliminate this bullet)\n* On conventional stacks, test one piece at a time more than whole assemblages (also \"called 10 unit tests for every integration test\"; again obsolete on Mu: <http:\/\/akkartik.name\/post\/tracing-tests>)\n* Never DRY tests, only production code. With tests it's more useful to be able to see everything at a glance. If the test is too long, perhaps you need better interfaces in your _production_ code.\n* Coverage is useful as a signal to check once in a while. It becomes less useful if you constantly look at it. If you happen to look and find that coverage is low, focus on doing the above bullets more diligently. 100% coverage is not desirable.",
        "user": "UCUSW7WVD",
        "ts": "1606933220.183900",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1606933501.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y0j+i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here are some opinions I wrote down yesterday, which happen to be disjoint:\n* Tests aren't always useful. There are legitimate reasons to avoid automated tests in some situations.\n* Testing first is a great way to get into the habit of writing tests. But the key is the tests, not when you write them.\n* In each test, take care to separate the thing being tested from setup and checks (I hadn't heard of AAA; thank you)\n* On conventional stacks, try to write code in a way that minimizes the need for testing I\/O (my Mu is designed to eliminate this bullet)\n* On conventional stacks, test one piece at a time more than whole assemblages (also \"called 10 unit tests for every integration test\"; again obsolete on Mu: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/tracing-tests"
                            },
                            {
                                "type": "text",
                                "text": ")\n* Never DRY tests, only production code. With tests it's more useful to be able to see everything at a glance. If the test is too long, perhaps you need better interfaces in your "
                            },
                            {
                                "type": "text",
                                "text": "production",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " code.\n* Coverage is useful as a signal to check once in a while. It becomes less useful if you constantly look at it. If you happen to look and find that coverage is low, focus on doing the above bullets more diligently. 100% coverage is not desirable."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606863972.181800",
        "parent_user_id": "UL5AX4G2H",
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    }
]