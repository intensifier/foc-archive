[
    {
        "client_msg_id": "92dd5f74-2062-4e82-888c-9bae5890a9d1",
        "type": "message",
        "text": "The programming benefits of chunking up to higher levels of abstraction (and having an easier time thinking with and remembering things for which we have a good shorthand) is a fairly Sapir-Whorf observation: <https:\/\/en.wikipedia.org\/wiki\/Linguistic_relativity>",
        "user": "U013ZLJARC7",
        "ts": "1627495944.260300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf4ae9e5b293",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f4ae9e5b29386489b18b3bc6b1f41a22.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "79y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The programming benefits of chunking up to higher levels of abstraction (and having an easier time thinking with and remembering things for which we have a good shorthand) is a fairly Sapir-Whorf observation: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Linguistic_relativity"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1626299086.235500",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "1410e07d-c98a-427b-9bf0-b3a13a91c3a2",
        "type": "message",
        "text": "&gt; your brain can apply the rules of grammar to the sentence \"the gostak distims the doshes\" to get other sentences like \"doshes are things that the gostak can distim\". Just as it can rearrange \"a * b \/ c\" into \"a \/ c * b\"\nI don't think the above analogy is direct - at least not how I think. In the first case I do not use rules of grammar to do the transform. I parse and \"understand\" the meaning. There is in an internal model in my brain and a schema. So the symbols become objects in this compact model. Now this model can be used to generate other sentences that are related in some way - I can even subtract or add information E.g. \"did the gostak distims the doshes yesterday?\" or \"The gostaks distim some things\"\n\nThis is quite different from 'grammar only' transforms which are basically identification of patterns and application of rules to those patterns, without any \"understanding\". I suppose in smaller cases I could understand it, e.g. `(a + b) * c` is `a*c + b*c` - that is something that makes sense. But in more complex algebra, I'm just 'looking for patterns' and matching against a 'rule database' I've memorized.",
        "user": "U8A5MS6R1",
        "ts": "1627506537.260500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mTi",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "your brain can apply the rules of grammar to the sentence \"the gostak distims the doshes\" to get other sentences like \"doshes are things that the gostak can distim\". Just as it can rearrange \"a * b \/ c\" into \"a \/ c * b\""
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think the above analogy is direct - at least not how I think. In the first case I do not use rules of grammar to do the transform. I parse and \"understand\" the meaning. There is in an internal model in my brain and a schema. So the symbols become objects in this compact model. Now this model can be used to generate other sentences that are related in some way - I can even subtract or add information E.g. \"did the gostak distims the doshes yesterday?\" or \"The gostaks distim some things\"\n\nThis is quite different from 'grammar only' transforms which are basically identification of patterns and application of rules to those patterns, without any \"understanding\". I suppose in smaller cases I could understand it, e.g. "
                            },
                            {
                                "type": "text",
                                "text": "(a + b) * c",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is "
                            },
                            {
                                "type": "text",
                                "text": "a*c + b*c",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - that is something that makes sense. But in more complex algebra, I'm just 'looking for patterns' and matching against a 'rule database' I've memorized."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1627341173.254300",
        "parent_user_id": "U017GNJM021"
    }
]