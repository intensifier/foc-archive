[
    {
        "client_msg_id": "3bad5ede-e78b-45f5-870c-a32ba3ef66be",
        "type": "message",
        "text": "<@U018LAH5QCT> The thing you're feeling here is why I've been using emacs for 35 years. While it's easy for me to imagine a new (especially more graphically capable) environment built around some language I like more than elisp, such a thing would absolutely need to be \"emacsy\" in this sense.",
        "user": "U013ZLJARC7",
        "ts": "1598780069.000300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf4ae9e5b293",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f4ae9e5b29386489b18b3bc6b1f41a22.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P6As",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U018LAH5QCT"
                            },
                            {
                                "type": "text",
                                "text": " The thing you're feeling here is why I've been using emacs for 35 years. While it's easy for me to imagine a new (especially more graphically capable) environment built around some language I like more than elisp, such a thing would absolutely need to be \"emacsy\" in this sense."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598649949.189300",
        "parent_user_id": "US370TRJA"
    },
    {
        "type": "message",
        "text": "<@UMWF81HTP> By \"magic numbers\" I mean this critic by Bret Victor. But I like more just being explicit in the language\/API and have labels on arguments, like: `ellipse(xPosition: 161, yPosition: 219, width: 114)`",
        "files": [
            {
                "id": "F01AFRJ6XLG",
                "created": 1598807822,
                "timestamp": 1598807822,
                "name": "Screen Shot 2020-08-30 at 12.16.07 PM.png",
                "title": "Screen Shot 2020-08-30 at 12.16.07 PM.png",
                "mimetype": "image\/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U85HCL7JP",
                "editable": false,
                "size": 166378,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https:\/\/files.slack.com\/files-pri\/T5TCAFTA9-F01AFRJ6XLG\/screen_shot_2020-08-30_at_12.16.07_pm.png?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "url_private_download": "https:\/\/files.slack.com\/files-pri\/T5TCAFTA9-F01AFRJ6XLG\/download\/screen_shot_2020-08-30_at_12.16.07_pm.png?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "media_display_type": "unknown",
                "thumb_64": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F01AFRJ6XLG-ae8540b141\/screen_shot_2020-08-30_at_12.16.07_pm_64.png?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_80": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F01AFRJ6XLG-ae8540b141\/screen_shot_2020-08-30_at_12.16.07_pm_80.png?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_360": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F01AFRJ6XLG-ae8540b141\/screen_shot_2020-08-30_at_12.16.07_pm_360.png?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_360_w": 360,
                "thumb_360_h": 72,
                "thumb_480": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F01AFRJ6XLG-ae8540b141\/screen_shot_2020-08-30_at_12.16.07_pm_480.png?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_480_w": 480,
                "thumb_480_h": 96,
                "thumb_160": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F01AFRJ6XLG-ae8540b141\/screen_shot_2020-08-30_at_12.16.07_pm_160.png?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_720": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F01AFRJ6XLG-ae8540b141\/screen_shot_2020-08-30_at_12.16.07_pm_720.png?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_720_w": 720,
                "thumb_720_h": 145,
                "thumb_800": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F01AFRJ6XLG-ae8540b141\/screen_shot_2020-08-30_at_12.16.07_pm_800.png?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_800_w": 800,
                "thumb_800_h": 161,
                "thumb_960": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F01AFRJ6XLG-ae8540b141\/screen_shot_2020-08-30_at_12.16.07_pm_960.png?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_960_w": 960,
                "thumb_960_h": 193,
                "thumb_1024": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F01AFRJ6XLG-ae8540b141\/screen_shot_2020-08-30_at_12.16.07_pm_1024.png?t=xoxe-197418537349-3752905280865-3737338514245-a498827e2ba3c388beb14b9717f8885a",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 206,
                "original_w": 1314,
                "original_h": 264,
                "thumb_tiny": "AwAJADCwXbceT19aA7dyfzqU9TRQBHvP94\/nRvP94\/nUlFAERd8jB4+tIrvu5JxU1A60Af\/Z",
                "permalink": "https:\/\/futureofcoding.slack.com\/files\/U85HCL7JP\/F01AFRJ6XLG\/screen_shot_2020-08-30_at_12.16.07_pm.png",
                "permalink_public": "https:\/\/slack-files.com\/T5TCAFTA9-F01AFRJ6XLG-c56856b05d",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "user": "U85HCL7JP",
        "display_as_bot": false,
        "ts": "1598807950.001100",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ph=3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMWF81HTP"
                            },
                            {
                                "type": "text",
                                "text": " By \"magic numbers\" I mean this critic by Bret Victor. But I like more just being explicit in the language\/API and have labels on arguments, like: "
                            },
                            {
                                "type": "text",
                                "text": "ellipse(xPosition: 161, yPosition: 219, width: 114)",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "513070B4-4067-49F2-932E-B171DCEB05DC",
        "type": "message",
        "text": "I think <@U013ZLJARC7> you hinted at the problem that it’s difficult to talk about the problem. I would agree in general with this but of course I’m still thinking about ways how to change the status quo. This documentary is a possibility in education about how the current system works. One of the more promising actual practices that I have found goes by the name of P2P learning. Has anyone heard of that or is interested in it?",
        "user": "UJFN50C00",
        "ts": "1598809047.006100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c+VNk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " you hinted at the problem that it’s difficult to talk about the problem. I would agree in general with this but of course I’m still thinking about ways how to change the status quo. This documentary is a possibility in education about how the current system works. One of the more promising actual practices that I have found goes by the name of P2P learning. Has anyone heard of that or is interested in it?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595686084.036400",
        "parent_user_id": "U014WA16VNJ"
    },
    {
        "client_msg_id": "f84bff47-bb2c-4f01-9ea9-9f9ce185be4e",
        "type": "message",
        "text": "<@U016LEA3J1H> I agree. State is essential to many problems, and the central concern of many users, yet is the source of much difficulty in programming. So we have tried valiantly to make it go away, or make it someone else's problem (the database). Some people peddle cures for state like snake oil, so don't believe everything you hear. State is still an unsolved problem.",
        "user": "U6KQ2S410",
        "ts": "1598809537.006700",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e8f4c2151d2b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-09\/225308926294_e8f4c2151d2b70ebfae3_72.jpg",
            "first_name": "Jonathan",
            "real_name": "Jonathan Edwards",
            "display_name": "jonathoda",
            "team": "T5TCAFTA9",
            "name": "jonathoda",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2uVQI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016LEA3J1H"
                            },
                            {
                                "type": "text",
                                "text": " I agree. State is essential to many problems, and the central concern of many users, yet is the source of much difficulty in programming. So we have tried valiantly to make it go away, or make it someone else's problem (the database). Some people peddle cures for state like snake oil, so don't believe everything you hear. State is still an unsolved problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "cb5777da-5d84-452f-a012-325cf91fee96",
        "type": "message",
        "text": "In the thing I am making, you can't have a variable without choosing a specific example value for that variable. This is surely something that's been discussed here before since Bret does it in Inventing On Principle. What do folks think of it?",
        "user": "U017GNJM021",
        "ts": "1598810841.008500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gada15ee32be",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ada15ee32bea73f6cfe00c7e36819a68.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "hamish todd",
            "display_name": "hamish todd",
            "team": "T5TCAFTA9",
            "name": "hamish.todd1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F85",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the thing I am making, you can't have a variable without choosing a specific example value for that variable. This is surely something that's been discussed here before since Bret does it in Inventing On Principle. What do folks think of it?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598810841.008500",
        "reply_count": 13,
        "reply_users_count": 6,
        "latest_reply": "1599330640.111700",
        "reply_users": [
            "U017GNJM021",
            "UBN9AFS0N",
            "UFPRPSA4S",
            "UA14TGLTC",
            "UE1JQM9HQ",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "U017GNJM021",
                "ts": "1598810934.008600"
            },
            {
                "user": "U017GNJM021",
                "ts": "1598810982.008800"
            },
            {
                "user": "U017GNJM021",
                "ts": "1598811059.009100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1598813261.009500"
            },
            {
                "user": "UFPRPSA4S",
                "ts": "1598836831.020800"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1598851279.029400"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1598857632.029800"
            },
            {
                "user": "U017GNJM021",
                "ts": "1598994762.075600"
            },
            {
                "user": "UFPRPSA4S",
                "ts": "1599020451.085000"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1599220389.105300"
            },
            {
                "user": "U017GNJM021",
                "ts": "1599258427.106600"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1599268987.107700"
            },
            {
                "user": "U017GNJM021",
                "ts": "1599330640.111700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "add3f361-92c9-43af-94df-742b6cbd478c",
        "type": "message",
        "text": "With the way things are going I *could* embrace a more abstract way of doing things and be like \"yeah don't worry, you can program without example values\". I am pretty sure this is the right way to go though. My favourite mathematician\/mathematics teacher, Tadashi Tokieda, says you should have lots and lots of examples",
        "user": "U017GNJM021",
        "ts": "1598810934.008600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gada15ee32be",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ada15ee32bea73f6cfe00c7e36819a68.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "hamish todd",
            "display_name": "hamish todd",
            "team": "T5TCAFTA9",
            "name": "hamish.todd1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gaf7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With the way things are going I "
                            },
                            {
                                "type": "text",
                                "text": "could",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " embrace a more abstract way of doing things and be like \"yeah don't worry, you can program without example values\". I am pretty sure this is the right way to go though. My favourite mathematician\/mathematics teacher, Tadashi Tokieda, says you should have lots and lots of examples"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598810841.008500",
        "parent_user_id": "U017GNJM021"
    },
    {
        "client_msg_id": "c447cd01-5c43-4e5c-8488-7c5c70306f09",
        "type": "message",
        "text": "It's not necessarily Bret-Victor-ian to have things be this way either, in theory every time you use a debugger you are \"programming by example\"",
        "user": "U017GNJM021",
        "ts": "1598810982.008800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gada15ee32be",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ada15ee32bea73f6cfe00c7e36819a68.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "hamish todd",
            "display_name": "hamish todd",
            "team": "T5TCAFTA9",
            "name": "hamish.todd1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mkv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not necessarily Bret-Victor-ian to have things be this way either, in theory every time you use a debugger you are \"programming by example\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598810841.008500",
        "parent_user_id": "U017GNJM021"
    },
    {
        "client_msg_id": "4fe464e3-3b58-4239-8ba3-e2543868283e",
        "type": "message",
        "text": "But I can certainly conceive of an experienced programmer\/mathematician saying \"no, the \"abstract view\"\/\"general case\", wherein a variable can take on many values, is fundamental and should be tackled first because [something]",
        "user": "U017GNJM021",
        "ts": "1598811059.009100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gada15ee32be",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ada15ee32bea73f6cfe00c7e36819a68.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "hamish todd",
            "display_name": "hamish todd",
            "team": "T5TCAFTA9",
            "name": "hamish.todd1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qaEyC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But I can certainly conceive of an experienced programmer\/mathematician saying \"no, the \"abstract view\"\/\"general case\", wherein a variable can take on many values, is fundamental and should be tackled first because [something]"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598810841.008500",
        "parent_user_id": "U017GNJM021"
    },
    {
        "client_msg_id": "4e011859-db09-47ea-9d49-c0ecf2551d66",
        "type": "message",
        "text": "I'd say that anyone creating an end user system should start with state and build around it.",
        "user": "UE6EFEPTQ",
        "ts": "1598812365.009300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pzrSO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd say that anyone creating an end user system should start with state and build around it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U8A5MS6R1",
                    "UHWC9PXBL",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "c091592c-a347-429d-9eb3-860597218256",
        "type": "message",
        "text": "I came here to say programming by example, but I see you already mentioned it :slightly_smiling_face: as long as it works for your tool, I find it really nice, you can't build invalid things since you are always referencing a valid example",
        "user": "UBN9AFS0N",
        "ts": "1598813261.009500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1598813279.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aToZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I came here to say programming by example, but I see you already mentioned it "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " as long as it works for your tool, I find it really nice, you can't build invalid things since you are always referencing a valid example"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598810841.008500",
        "parent_user_id": "U017GNJM021"
    },
    {
        "client_msg_id": "be0a2012-349a-40a9-8b70-5170b2d7f0fc",
        "type": "message",
        "text": "I have been using use one of the Carpalx layouts for 10 years. <http:\/\/mkweb.bcgsc.ca\/carpalx\/|http:\/\/mkweb.bcgsc.ca\/carpalx\/>",
        "user": "UP3FH4CLU",
        "ts": "1598817530.010200",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "40f3551ff561",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-19\/1372124144885_40f3551ff56134e83fb6_72.png",
            "first_name": "",
            "real_name": "Robbie Gleichman",
            "display_name": "Robbie Gleichman",
            "team": "T5TCAFTA9",
            "name": "rgleichman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IBf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have been using use one of the Carpalx layouts for 10 years. "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/mkweb.bcgsc.ca\/carpalx\/",
                                "text": "http:\/\/mkweb.bcgsc.ca\/carpalx\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "65a037cf-434f-4629-9466-80e97263df24",
        "type": "message",
        "text": "I'm skeptical that logic is needed to understand natural language. For example, I don't believe Transformer translation systems explicitly model logic <http:\/\/jalammar.github.io\/illustrated-transformer\/|http:\/\/jalammar.github.io\/illustrated-transformer\/>",
        "user": "UP3FH4CLU",
        "ts": "1598818029.010400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "40f3551ff561",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-19\/1372124144885_40f3551ff56134e83fb6_72.png",
            "first_name": "",
            "real_name": "Robbie Gleichman",
            "display_name": "Robbie Gleichman",
            "team": "T5TCAFTA9",
            "name": "rgleichman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "title": "The Illustrated Transformer",
                "title_link": "http:\/\/jalammar.github.io\/illustrated-transformer\/",
                "text": "Discussions: Hacker News (65 points, 4 comments), Reddit r\/MachineLearning (29 points, 3 comments) Translations: Chinese (Simplified), Japanese, Korean, Russian Watch: MIT’s Deep Learning State of the Art lecture referencing this post In the previous post, we looked at Attention – a ubiquitous method in modern deep learning models. Attention is a concept that helped improve the performance of neural machine translation applications. In this post, we will look at The Transformer – a model that uses attention to boost the speed with which these models can be trained. The Transformers outperforms the Google Neural Machine Translation model in specific tasks. The biggest benefit, however, comes from how The Transformer lends itself to parallelization. It is in fact Google Cloud’s recommendation to use The Transformer as a reference model to use their Cloud TPU offering. So let’s try to break the model apart and look at how it functions. The Transformer was proposed in the paper Attention is All You Need. A TensorFlow implementation of it is available as a part of the Tensor2Tensor package. Harvard’s NLP group created a guide annotating the paper with PyTorch implementation. In this post, we will attempt to oversimplify things a bit and introduce the concepts one by one to hopefully make it easier to understand to people without in-depth knowledge of the subject matter. A High-Level Look Let’s begin by looking at the model as a single black box. In a machine translation application, it would take a sentence in one language, and output its translation in another.",
                "fallback": "The Illustrated Transformer",
                "from_url": "http:\/\/jalammar.github.io\/illustrated-transformer\/",
                "service_name": "jalammar.github.io",
                "id": 1,
                "original_url": "http:\/\/jalammar.github.io\/illustrated-transformer\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7bWo4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm skeptical that logic is needed to understand natural language. For example, I don't believe Transformer translation systems explicitly model logic "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/jalammar.github.io\/illustrated-transformer\/",
                                "text": "http:\/\/jalammar.github.io\/illustrated-transformer\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598499469.142200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "type": "message",
        "text": "Has it helped with RSI?",
        "user": "UL5AX4G2H",
        "ts": "1598819446.010700",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b05739c44158",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-12-05\/1552783044467_b05739c44158d860f3bd_72.png",
            "first_name": "",
            "real_name": "Tyler Adams",
            "display_name": "Tyler Adams",
            "team": "T5TCAFTA9",
            "name": "coppero1237",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w1F3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has it helped with RSI?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "e7c81335-ec6f-4607-902b-4d6f2c961a8e",
        "type": "message",
        "text": "I didn't have RSI.",
        "user": "UP3FH4CLU",
        "ts": "1598825893.000100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "40f3551ff561",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-19\/1372124144885_40f3551ff56134e83fb6_72.png",
            "first_name": "",
            "real_name": "Robbie Gleichman",
            "display_name": "Robbie Gleichman",
            "team": "T5TCAFTA9",
            "name": "rgleichman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pQF1p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I didn't have RSI."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "08C75B0C-2D2C-4C17-9147-F68FC77F584B",
        "type": "message",
        "text": "This is such a complicated and cool question and I have so many thoughts I don’t even know where to begin. I remember watching your talk about the thing you’re making and I think you mentioned something along these lines being one of the big problems. I was surprised you wanted to be able to prove theorems in this system because of course a visual environment and proofs have this tension. I’m curious what kind of proofs you would have in this system. In the video you mentioned a theorem in quantum computing(?) but I couldn’t find it. As an elementary but nontrivial example how would you prove the Pythagorean theorem? I think you would have to do this abstractly, but as long as it is “constructive” you can unfold the abstract proof at various stages and apply it to specific vectors to visualize it.  Also, if you are doing proofs I imagine these would be “formal proofs” and isn’t that a really tough problem? Or do I misunderstand or is there some way to get around it? eg just have a more expressive and dynamic means to write informal proofs. Anyway I certainly wouldn’t shy away from general variables as long as you have a means to move up and down the ladder of abstraction :wink:. ",
        "user": "UFPRPSA4S",
        "ts": "1598836831.020800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5f4ac5375e5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f5f4ac5375e539e50ceedb08f65e9dd3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Robin Allison",
            "display_name": "Robin",
            "team": "T5TCAFTA9",
            "name": "robinps2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FVgk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is such a complicated and cool question and I have so many thoughts I don’t even know where to begin. I remember watching your talk about the thing you’re making and I think you mentioned something along these lines being one of the big problems. I was surprised you wanted to be able to prove theorems in this system because of course a visual environment and proofs have this tension. I’m curious what kind of proofs you would have in this system. In the video you mentioned a theorem in quantum computing(?) but I couldn’t find it. As an elementary but nontrivial example how would you prove the Pythagorean theorem? I think you would have to do this abstractly, but as long as it is “constructive” you can unfold the abstract proof at various stages and apply it to specific vectors to visualize it.  Also, if you are doing proofs I imagine these would be “formal proofs” and isn’t that a really tough problem? Or do I misunderstand or is there some way to get around it? eg just have a more expressive and dynamic means to write informal proofs. Anyway I certainly wouldn’t shy away from general variables as long as you have a means to move up and down the ladder of abstraction "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": ". "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598810841.008500",
        "parent_user_id": "U017GNJM021"
    },
    {
        "client_msg_id": "136C8721-315A-4D43-8AC5-DC7706526114",
        "type": "message",
        "text": "<@UP3FH4CLU> I think you misunderstand my interest in natural language. I’m interested in using it strictly as a primary programming interface. Few people would argue that we should have deep learning models interpreting all of our code (plaintext) to take action based on educated guesses about what we wanted to say (if you think that, that’s a separate discussion). I’m just exploring a syntax based on logic (i.e. explicitly broken into logical units with a well-defined semantics) but expressed in natural language (so that it is human-readable without having studied a course on logic).",
        "user": "UCGAK10LS",
        "ts": "1598838322.028400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "770c193fd379",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-17\/1092364753072_770c193fd379ebbced3f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NGw8Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP3FH4CLU"
                            },
                            {
                                "type": "text",
                                "text": " I think you misunderstand my interest in natural language. I’m interested in using it strictly as a primary programming interface. Few people would argue that we should have deep learning models interpreting all of our code (plaintext) to take action based on educated guesses about what we wanted to say (if you think that, that’s a separate discussion). I’m just exploring a syntax based on logic (i.e. explicitly broken into logical units with a well-defined semantics) but expressed in natural language (so that it is human-readable without having studied a course on logic)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598499469.142200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "f75cc92c-fc78-41ca-b3b5-d9da87260631",
        "type": "message",
        "text": "I mean making change of time more explicit: more directly observable, manipulatable, and constrainable.  This can take many forms.  Here's an example.\n\nStep 0: Setup\nImagine a fairly conventional imperative system.  We have a bunch of boxes (variables) in which we can put values.\n\nStep 1: Observable\nWe show which values go which boxes in what order.  Often systems let us check state only in the moment or keep dubious logs about what happened in the past.  Forget asking about the future.  Imagine lining up the boxes.  We might be able to scrub forward and backward through time, or add a timeline showing what values were in each box when.\n\nStep 2: Manipulatable\nGood old structured programming is kind of nice on this front.  Each assignment statement records how the contents of a box change.  Suppose we directly manipulate the boxes in some other way, then we can record a script of the assignments made.  Glue scripts together.  Good, clean fun.\n\nStep 3: Constrainable\nExcept we don't abstract cleanly from the step-to-step to composable recipes.  With functions\/procedures, we keep track of arguments and return values, but we don't keep track of what boxes get examined or updated.  We can't easily tell if ordering of calls matters, and we cannot easily require that things always happen in a certain order.",
        "user": "UA14TGLTC",
        "ts": "1598847143.029100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0r+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I mean making change of time more explicit: more directly observable, manipulatable, and constrainable.  This can take many forms.  Here's an example.\n\nStep 0: Setup\nImagine a fairly conventional imperative system.  We have a bunch of boxes (variables) in which we can put values.\n\nStep 1: Observable\nWe show which values go which boxes in what order.  Often systems let us check state only in the moment or keep dubious logs about what happened in the past.  Forget asking about the future.  Imagine lining up the boxes.  We might be able to scrub forward and backward through time, or add a timeline showing what values were in each box when.\n\nStep 2: Manipulatable\nGood old structured programming is kind of nice on this front.  Each assignment statement records how the contents of a box change.  Suppose we directly manipulate the boxes in some other way, then we can record a script of the assignments made.  Glue scripts together.  Good, clean fun.\n\nStep 3: Constrainable\nExcept we don't abstract cleanly from the step-to-step to composable recipes.  With functions\/procedures, we keep track of arguments and return values, but we don't keep track of what boxes get examined or updated.  We can't easily tell if ordering of calls matters, and we cannot easily require that things always happen in a certain order."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598684481.204900",
        "parent_user_id": "UBRKVHMCL"
    },
    {
        "client_msg_id": "679dc7fe-773e-4c13-a71a-a4fc28394542",
        "type": "message",
        "text": "Starting from concrete values, you can approach abstraction by lifting from a single value to many at once.  Remember Bret's Ladder of Abstraction.  For extra fun, have interactions between the multiple values.  For instance, instead of a solution set of values that would work in a given context, have a probability distribution.  I was pretty into these propagation networks at once point <https:\/\/dspace.mit.edu\/handle\/1721.1\/49525>.  Don't know if more progress has been made.",
        "user": "UA14TGLTC",
        "ts": "1598851279.029400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "16f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Starting from concrete values, you can approach abstraction by lifting from a single value to many at once.  Remember Bret's Ladder of Abstraction.  For extra fun, have interactions between the multiple values.  For instance, instead of a solution set of values that would work in a given context, have a probability distribution.  I was pretty into these propagation networks at once point "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dspace.mit.edu\/handle\/1721.1\/49525"
                            },
                            {
                                "type": "text",
                                "text": ".  Don't know if more progress has been made."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598810841.008500",
        "parent_user_id": "U017GNJM021"
    },
    {
        "client_msg_id": "f019ddaa-8004-470c-9038-5588083d5a27",
        "type": "message",
        "text": "<@UJFN50C00> The version of that concept with which I'm familiar is a sort of \"horizontal transfer\" of knowledge within orgs. Can you elaborate on how it would fit into your vision here?",
        "user": "U013ZLJARC7",
        "ts": "1598857072.029600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf4ae9e5b293",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f4ae9e5b29386489b18b3bc6b1f41a22.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n4W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJFN50C00"
                            },
                            {
                                "type": "text",
                                "text": " The version of that concept with which I'm familiar is a sort of \"horizontal transfer\" of knowledge within orgs. Can you elaborate on how it would fit into your vision here?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595686084.036400",
        "parent_user_id": "U014WA16VNJ"
    }
]